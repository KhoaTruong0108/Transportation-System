//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Untitled Shopping Central
//  @ File Name : IDGenerator.cs
//  @ Date : 2/22/2013
//  @ Author :  khoatd
//
//
using System;
using System.Linq;
using DBManagement;
using System.Linq.Expressions;

namespace AppCommon.Util
{
    public static class IDGenerator
    {
        private static string PRE_ID_USER                               = "UR";
        private static string PRE_ID_IRREGULAR_ORDER                    = "IO";
        private static string PRE_ID_REGULAR_ORDER                      = "RO";
        private static string PRE_ID_CUSTOMER                           = "CUS";
        private static string PRE_ID_TICKET                             = "TK";
        private static string PRE_ID_REVENUE                            = "RV";
        private static string PRE_ID_REVENUE_DETAIL                     = "RD";
        private static string PRE_ID_EXPENSE                            = "EP";
        private static string PRE_ID_TICKET_PRICE_CONFIG                = "TP";
        private static string PRE_ID_TICKET_HISTORY                     = "TH";
        private static string PRE_ID_TICKET_SALE_DATE                   = "TD";
        private static string PRE_ID_TICKET_RETURN_FEE_CONFIG           = "TR";
        private static string PRE_ID_TRANSPORT_PRICE_CONFIGURATION      = "TP";
        private static string PRE_ID_GUARANTEE_FEE_CONFIGURATION        = "GF";
        private static string PRE_ID_ORDER_HISTORY                      = "OH";

        private static string ID_FORMAT = "{0}-{1}";
        private static string DECONFLICT_CODE_FORMAT = "{0}-{1}";

        private const string PADDING_ZEROS = "D8";

        private static ThanhVanTranSysEntities _dbContext = new ThanhVanTranSysEntities();

        private static string GenerateNewID(string prefix)
        {
            return string.Format(ID_FORMAT, prefix, DateTime.Now.ToString("yyyyMMddhhmmssfff"));
        }

        private static string GetPrefix(Type type)
        {
            string prefix = string.Empty;
            if (type.Equals(typeof(User)))
            {
                prefix = PRE_ID_USER;
            }
            else if (type.Equals(typeof(Customer)))
            {
                prefix = PRE_ID_CUSTOMER;
            }
            else if (type.Equals(typeof(IrregularOrder)))
            {
                prefix = PRE_ID_IRREGULAR_ORDER;
            }
            else if (type.Equals(typeof(RegularOrder)))
            {
                prefix = PRE_ID_REGULAR_ORDER;
            }
            else if (type.Equals(typeof(Ticket)))
            {
                prefix = PRE_ID_TICKET;
            }
            else if (type.Equals(typeof(TransportPriceConfiguration)))
            {
                prefix = PRE_ID_TRANSPORT_PRICE_CONFIGURATION;
            }
            else if (type.Equals(typeof(GuaranteeFeeConfiguration)))
            {
                prefix = PRE_ID_GUARANTEE_FEE_CONFIGURATION;
            }
            else if (type.Equals(typeof(TicketPriceConfiguration)))
            {
                prefix = PRE_ID_TICKET_PRICE_CONFIG;
            }
            else if (type.Equals(typeof(TicketSaleDate)))
            {
                prefix = PRE_ID_TICKET_SALE_DATE;
            }
            else if (type.Equals(typeof(OrderHistory)))
            {
                prefix = PRE_ID_ORDER_HISTORY;
            }
            else
            {
                throw new Exception("Type not supported.");
            }
            return prefix;
        }

        /// <summary>
        /// Generates a new id.
        /// </summary>
        /// <typeparam name="T">The entity type.</typeparam>
        /// <param name="autoIncremental">If <c>true</c>, the id will be generate auto-incrementally based on the latest record;
        /// otherwise, default pattern will be used. Default: <c>false</c></param>
        /// <returns></returns>
        public static string NewId<T>(bool autoIncremental = false) where T : System.Data.Objects.DataClasses.EntityObject
        {
            string id = string.Empty;
            try
            {
                string prefix = GetPrefix(typeof(T));
                var objectSet = _dbContext.CreateObjectSet<T>();
                if (autoIncremental)
                {
                    int increment = 0;
                    if (objectSet.Count() > 0)
                    {
                        // Create the sort expression
                        var param = Expression.Parameter(typeof(T), "e");
                        var body = Expression.Property(param, "id");
                        var sortExpression = Expression.Lambda<Func<T, object>>(body, param);

                        T latestEntity = objectSet.OrderByDescending(sortExpression).First();
                        var latestEntityId = latestEntity.EntityKey.EntityKeyValues[0].Value.ToString();
                        increment = int.Parse(latestEntityId.Substring(prefix.Length + 1));
                    }
                    increment++;
                    id = string.Format(ID_FORMAT, prefix, increment.ToString(PADDING_ZEROS));
                }
                else
                {
                    id = GenerateNewID(prefix);
                    while (objectSet.AsEnumerable().Any(e => e.EntityKey.EntityKeyValues[0].Value.ToString().Contains(id)))
                    //while (id.Equals(latestEntityId))
                    {
                        // If the id already existed, sleep 1 millisecond and generate a new id
                        System.Threading.Thread.Sleep(1);
                        id = GenerateNewID(prefix);
                    }
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return id;
        }

        public static string TicketId()
        {
            string id = GenerateNewID(PRE_ID_TICKET);
            if (_dbContext.Tickets.Any(i => i.id.Contains(id)))
            {
                int index = _dbContext.Tickets.Where(i => i.id.Contains(id)).OrderBy(i => i.id).Count();

                id = string.Format(DECONFLICT_CODE_FORMAT, id, index.ToString("000"));
            }
            return id;
        }

        public static string TicketHistoryId()
        {
            string id = GenerateNewID(PRE_ID_TICKET_HISTORY);
            if (_dbContext.TicketHistories.Any(i => i.id.Contains(id)))
            {
                int index = _dbContext.TicketHistories.Where(i => i.id.Contains(id)).OrderBy(i => i.id).Count();

                id = string.Format(DECONFLICT_CODE_FORMAT, id, index.ToString("000"));
            }
            return id;
        }

        public static string NewOrderItemId(string orderId, int itemNo)
        {
            return string.Format("{0}-{1}", orderId, itemNo.ToString("000"));
        }

        public static string RevenueId()
        {
            string id = GenerateNewID(PRE_ID_REVENUE);
            if (_dbContext.Revenues.Any(i => i.id.Contains(id)))
            {
                int index = _dbContext.Revenues.Where(i => i.id.Contains(id)).OrderBy(i => i.id).Count();

                id = string.Format(DECONFLICT_CODE_FORMAT, id, index.ToString("000"));
            }
            return id;
        }

        public static string RevenueDetailId()
        {
            string id = GenerateNewID(PRE_ID_REVENUE_DETAIL);
            if (_dbContext.RevenueDetails.Any(i => i.id.Contains(id)))
            {
                int index = _dbContext.RevenueDetails.Where(i => i.id.Contains(id)).OrderBy(i => i.id).Count();

                id = string.Format(DECONFLICT_CODE_FORMAT, id, index.ToString("000"));
            }
            return id;
        }

        public static string ExpenseId()
        {
            string id = GenerateNewID(PRE_ID_EXPENSE);
            if (_dbContext.Expenses.Any(i => i.id.Contains(id)))
            {
                int index = _dbContext.Expenses.Where(i => i.id.Contains(id)).OrderBy(i => i.id).Count();

                id = string.Format(DECONFLICT_CODE_FORMAT, id, index.ToString("000"));
            }
            return id;
        }

        public static string TicketPriceConfigId()
        {
            string id = GenerateNewID(PRE_ID_TICKET_PRICE_CONFIG);
            if (_dbContext.TicketPriceConfigurations.Any(i => i.id.Contains(id)))
            {
                int index = _dbContext.TicketPriceConfigurations.Where(i => i.id.Contains(id)).OrderBy(i => i.id).Count();

                id = string.Format(DECONFLICT_CODE_FORMAT, id, index.ToString("000"));
            }
            return id;
        }

        public static string SaleTicketDateId()
        {
            string id = GenerateNewID(PRE_ID_TICKET_SALE_DATE);
            if (_dbContext.Expenses.Any(i => i.id.Contains(id)))
            {
                int index = _dbContext.TicketSaleDates.Where(i => i.id.Contains(id)).OrderBy(i => i.id).Count();

                id = string.Format(DECONFLICT_CODE_FORMAT, id, index.ToString("000"));
            }
            return id;
        }

        public static string TicketReturnFeeConfigId()
        {
            string id = GenerateNewID(PRE_ID_TICKET_RETURN_FEE_CONFIG);
            if (_dbContext.TicketReturnFeeConfigurations.Any(i => i.id.Contains(id)))
            {
                int index = _dbContext.TicketReturnFeeConfigurations.Where(i => i.id.Contains(id)).OrderBy(i => i.id).Count();

                id = string.Format(DECONFLICT_CODE_FORMAT, id, index.ToString("000"));
            }
            return id;
        }
    }
}
