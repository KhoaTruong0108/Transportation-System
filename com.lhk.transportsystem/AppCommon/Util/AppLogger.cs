//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : TransportSystem
//  @ File Name : AppLogger.cs
//  @ Date : 12/17/2013
//  @ Author : khoatd
//
//
using System;
using System.Collections.Generic;
using System.IO;
using log4net;
using log4net.Config;
using System.Windows.Forms;
using System.Data.Objects.DataClasses;
using System.Text;

namespace AppCommon.Util
{
    public class AppLogger
    {
        protected static log4net.ILog logger = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        static AppLogger()
        {
            XmlConfigurator.Configure();
        }

        #region Logging
        public static void logInfo(string className, string msg)
        {
            logger = log4net.LogManager.GetLogger(className);
            logger.Info(string.Format("{0}: {1}", className, msg));
        }

        public static void logInfo(string className, string action, EntityObject obj)
        {
            if (obj == null) return;

            StringBuilder msg = new StringBuilder();
            msg.Append(string.Format("[{0}/{1}]", action, obj.GetType().ToString()));

            msg.Append(BuildObjectInfo(obj));

            logger = log4net.LogManager.GetLogger(className);
            logger.Info(msg);
        }

        public static void logInfo(string className, string action, EntityObject obj, List<EntityObject> childObj)
        {
            logInfo(className, action, obj);

            foreach (var child in childObj)
            {
                logInfo(className, action, obj);
            }
        }

        public static void logDebug(string className, string action, EntityObject obj)
        {
            if (obj == null) return;

            StringBuilder msg = new StringBuilder();
            msg.Append(string.Format("[{0}/{1}]", action, obj.GetType().ToString()));

            msg.Append(BuildObjectInfo(obj));

            logger = log4net.LogManager.GetLogger(className);
            logger.Debug(msg);
        }

        public static void logDebug(string className, string action, EntityObject obj, List<EntityObject> childObj)
        {
            logDebug(className, action, obj);

            foreach (var child in childObj)
            {
                logDebug(className, action, obj);
            }
        }

        public static void logDebug(string className, string msg)
        {
            logger = log4net.LogManager.GetLogger(className);
            logger.Debug(msg);
        }

        public static void logError(string className, string msg)
        {
            logger = log4net.LogManager.GetLogger(className);
            logger.Error(msg);
        }

        public static void logError(string className, Exception exc)
        {
            logError(className, "", exc);
        }

        public static void logError(string className, string msg, Exception exc)
        {
            logger = log4net.LogManager.GetLogger(className);
            logger.Error(string.Format("{0}: {1}", className, msg), exc);
        }
        #endregion

        #region Utilities
        private static string BuildObjectInfo(EntityObject entity)
        {
            StringBuilder strBuilder = new StringBuilder();
            foreach (var property in entity.GetType().GetProperties())
            {
                strBuilder.Append(string.Format("{0}: {1},", property.Name, property.GetValue(entity, null)));
            }
            return strBuilder.ToString();
        }
        #endregion
    }
}
