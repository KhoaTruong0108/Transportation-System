/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace TransportService
{

  [Serializable]
  public partial class TGuaranteeFee : TBase
  {
    private string _Id;
    private double _ValueFrom;
    private double _ValueTo;
    private double _Fee;

    public string Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public double ValueFrom
    {
      get
      {
        return _ValueFrom;
      }
      set
      {
        __isset.ValueFrom = true;
        this._ValueFrom = value;
      }
    }

    public double ValueTo
    {
      get
      {
        return _ValueTo;
      }
      set
      {
        __isset.ValueTo = true;
        this._ValueTo = value;
      }
    }

    public double Fee
    {
      get
      {
        return _Fee;
      }
      set
      {
        __isset.Fee = true;
        this._Fee = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool Id;
      public bool ValueFrom;
      public bool ValueTo;
      public bool Fee;
    }

    public TGuaranteeFee() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              ValueFrom = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              ValueTo = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Fee = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TGuaranteeFee");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.Id) {
        field.Name = "Id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.ValueFrom) {
        field.Name = "ValueFrom";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ValueFrom);
        oprot.WriteFieldEnd();
      }
      if (__isset.ValueTo) {
        field.Name = "ValueTo";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ValueTo);
        oprot.WriteFieldEnd();
      }
      if (__isset.Fee) {
        field.Name = "Fee";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Fee);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TGuaranteeFee(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",ValueFrom: ");
      sb.Append(ValueFrom);
      sb.Append(",ValueTo: ");
      sb.Append(ValueTo);
      sb.Append(",Fee: ");
      sb.Append(Fee);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
