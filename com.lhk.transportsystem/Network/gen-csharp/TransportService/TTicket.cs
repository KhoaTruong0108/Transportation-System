/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace TransportService
{

  [Serializable]
  public partial class TTicket : TBase
  {
    private string _TicketId;
    private string _BusId;
    private string _DepartTime;
    private string _TourId;
    private int _SeatNo;
    private string _SeatType;
    private string _CusName;
    private string _CusIdNo;
    private string _CusPhone;
    private double _TicketPrice;
    private string _UserId;
    private string _status;
    private bool _isDeleted;
    private string _PickupLocation;

    public string TicketId
    {
      get
      {
        return _TicketId;
      }
      set
      {
        __isset.TicketId = true;
        this._TicketId = value;
      }
    }

    public string BusId
    {
      get
      {
        return _BusId;
      }
      set
      {
        __isset.BusId = true;
        this._BusId = value;
      }
    }

    public string DepartTime
    {
      get
      {
        return _DepartTime;
      }
      set
      {
        __isset.DepartTime = true;
        this._DepartTime = value;
      }
    }

    public string TourId
    {
      get
      {
        return _TourId;
      }
      set
      {
        __isset.TourId = true;
        this._TourId = value;
      }
    }

    public int SeatNo
    {
      get
      {
        return _SeatNo;
      }
      set
      {
        __isset.SeatNo = true;
        this._SeatNo = value;
      }
    }

    public string SeatType
    {
      get
      {
        return _SeatType;
      }
      set
      {
        __isset.SeatType = true;
        this._SeatType = value;
      }
    }

    public string CusName
    {
      get
      {
        return _CusName;
      }
      set
      {
        __isset.CusName = true;
        this._CusName = value;
      }
    }

    public string CusIdNo
    {
      get
      {
        return _CusIdNo;
      }
      set
      {
        __isset.CusIdNo = true;
        this._CusIdNo = value;
      }
    }

    public string CusPhone
    {
      get
      {
        return _CusPhone;
      }
      set
      {
        __isset.CusPhone = true;
        this._CusPhone = value;
      }
    }

    public double TicketPrice
    {
      get
      {
        return _TicketPrice;
      }
      set
      {
        __isset.TicketPrice = true;
        this._TicketPrice = value;
      }
    }

    public string UserId
    {
      get
      {
        return _UserId;
      }
      set
      {
        __isset.UserId = true;
        this._UserId = value;
      }
    }

    public string Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public bool IsDeleted
    {
      get
      {
        return _isDeleted;
      }
      set
      {
        __isset.isDeleted = true;
        this._isDeleted = value;
      }
    }

    public string PickupLocation
    {
      get
      {
        return _PickupLocation;
      }
      set
      {
        __isset.PickupLocation = true;
        this._PickupLocation = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool TicketId;
      public bool BusId;
      public bool DepartTime;
      public bool TourId;
      public bool SeatNo;
      public bool SeatType;
      public bool CusName;
      public bool CusIdNo;
      public bool CusPhone;
      public bool TicketPrice;
      public bool UserId;
      public bool status;
      public bool isDeleted;
      public bool PickupLocation;
    }

    public TTicket() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TicketId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              BusId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              DepartTime = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              TourId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              SeatNo = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              SeatType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              CusName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              CusIdNo = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              CusPhone = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Double) {
              TicketPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Status = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Bool) {
              IsDeleted = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              PickupLocation = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TTicket");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TicketId != null && __isset.TicketId) {
        field.Name = "TicketId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TicketId);
        oprot.WriteFieldEnd();
      }
      if (BusId != null && __isset.BusId) {
        field.Name = "BusId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BusId);
        oprot.WriteFieldEnd();
      }
      if (DepartTime != null && __isset.DepartTime) {
        field.Name = "DepartTime";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DepartTime);
        oprot.WriteFieldEnd();
      }
      if (TourId != null && __isset.TourId) {
        field.Name = "TourId";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TourId);
        oprot.WriteFieldEnd();
      }
      if (__isset.SeatNo) {
        field.Name = "SeatNo";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SeatNo);
        oprot.WriteFieldEnd();
      }
      if (SeatType != null && __isset.SeatType) {
        field.Name = "SeatType";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SeatType);
        oprot.WriteFieldEnd();
      }
      if (CusName != null && __isset.CusName) {
        field.Name = "CusName";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CusName);
        oprot.WriteFieldEnd();
      }
      if (CusIdNo != null && __isset.CusIdNo) {
        field.Name = "CusIdNo";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CusIdNo);
        oprot.WriteFieldEnd();
      }
      if (CusPhone != null && __isset.CusPhone) {
        field.Name = "CusPhone";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CusPhone);
        oprot.WriteFieldEnd();
      }
      if (__isset.TicketPrice) {
        field.Name = "TicketPrice";
        field.Type = TType.Double;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(TicketPrice);
        oprot.WriteFieldEnd();
      }
      if (UserId != null && __isset.UserId) {
        field.Name = "UserId";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (Status != null && __isset.status) {
        field.Name = "status";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Status);
        oprot.WriteFieldEnd();
      }
      if (__isset.isDeleted) {
        field.Name = "isDeleted";
        field.Type = TType.Bool;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsDeleted);
        oprot.WriteFieldEnd();
      }
      if (PickupLocation != null && __isset.PickupLocation) {
        field.Name = "PickupLocation";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PickupLocation);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TTicket(");
      sb.Append("TicketId: ");
      sb.Append(TicketId);
      sb.Append(",BusId: ");
      sb.Append(BusId);
      sb.Append(",DepartTime: ");
      sb.Append(DepartTime);
      sb.Append(",TourId: ");
      sb.Append(TourId);
      sb.Append(",SeatNo: ");
      sb.Append(SeatNo);
      sb.Append(",SeatType: ");
      sb.Append(SeatType);
      sb.Append(",CusName: ");
      sb.Append(CusName);
      sb.Append(",CusIdNo: ");
      sb.Append(CusIdNo);
      sb.Append(",CusPhone: ");
      sb.Append(CusPhone);
      sb.Append(",TicketPrice: ");
      sb.Append(TicketPrice);
      sb.Append(",UserId: ");
      sb.Append(UserId);
      sb.Append(",Status: ");
      sb.Append(Status);
      sb.Append(",IsDeleted: ");
      sb.Append(IsDeleted);
      sb.Append(",PickupLocation: ");
      sb.Append(PickupLocation);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
