/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace TransportService
{

  [Serializable]
  public partial class TUser : TBase
  {
    private string _Id;
    private string _StaffId;
    private string _UserName;
    private string _Role;
    private bool _ActiveStatus;
    private bool _Deleted;

    public string Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string StaffId
    {
      get
      {
        return _StaffId;
      }
      set
      {
        __isset.StaffId = true;
        this._StaffId = value;
      }
    }

    public string UserName
    {
      get
      {
        return _UserName;
      }
      set
      {
        __isset.UserName = true;
        this._UserName = value;
      }
    }

    public string Role
    {
      get
      {
        return _Role;
      }
      set
      {
        __isset.Role = true;
        this._Role = value;
      }
    }

    public bool ActiveStatus
    {
      get
      {
        return _ActiveStatus;
      }
      set
      {
        __isset.ActiveStatus = true;
        this._ActiveStatus = value;
      }
    }

    public bool Deleted
    {
      get
      {
        return _Deleted;
      }
      set
      {
        __isset.Deleted = true;
        this._Deleted = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool Id;
      public bool StaffId;
      public bool UserName;
      public bool Role;
      public bool ActiveStatus;
      public bool Deleted;
    }

    public TUser() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              StaffId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Role = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              ActiveStatus = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              Deleted = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TUser");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.Id) {
        field.Name = "Id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (StaffId != null && __isset.StaffId) {
        field.Name = "StaffId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StaffId);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.UserName) {
        field.Name = "UserName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (Role != null && __isset.Role) {
        field.Name = "Role";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Role);
        oprot.WriteFieldEnd();
      }
      if (__isset.ActiveStatus) {
        field.Name = "ActiveStatus";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(ActiveStatus);
        oprot.WriteFieldEnd();
      }
      if (__isset.Deleted) {
        field.Name = "Deleted";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Deleted);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TUser(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",StaffId: ");
      sb.Append(StaffId);
      sb.Append(",UserName: ");
      sb.Append(UserName);
      sb.Append(",Role: ");
      sb.Append(Role);
      sb.Append(",ActiveStatus: ");
      sb.Append(ActiveStatus);
      sb.Append(",Deleted: ");
      sb.Append(Deleted);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
