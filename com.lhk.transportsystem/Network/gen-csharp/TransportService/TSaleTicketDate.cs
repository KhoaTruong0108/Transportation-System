/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace TransportService
{

  [Serializable]
  public partial class TSaleTicketDate : TBase
  {
    private string _SaleId;
    private int _SaleDay;
    private int _SaleMonth;
    private int _SaleYear;
    private int _BeforDay;

    public string SaleId
    {
      get
      {
        return _SaleId;
      }
      set
      {
        __isset.SaleId = true;
        this._SaleId = value;
      }
    }

    public int SaleDay
    {
      get
      {
        return _SaleDay;
      }
      set
      {
        __isset.SaleDay = true;
        this._SaleDay = value;
      }
    }

    public int SaleMonth
    {
      get
      {
        return _SaleMonth;
      }
      set
      {
        __isset.SaleMonth = true;
        this._SaleMonth = value;
      }
    }

    public int SaleYear
    {
      get
      {
        return _SaleYear;
      }
      set
      {
        __isset.SaleYear = true;
        this._SaleYear = value;
      }
    }

    public int BeforDay
    {
      get
      {
        return _BeforDay;
      }
      set
      {
        __isset.BeforDay = true;
        this._BeforDay = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool SaleId;
      public bool SaleDay;
      public bool SaleMonth;
      public bool SaleYear;
      public bool BeforDay;
    }

    public TSaleTicketDate() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SaleId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SaleDay = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              SaleMonth = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              SaleYear = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              BeforDay = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TSaleTicketDate");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SaleId != null && __isset.SaleId) {
        field.Name = "SaleId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SaleId);
        oprot.WriteFieldEnd();
      }
      if (__isset.SaleDay) {
        field.Name = "SaleDay";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SaleDay);
        oprot.WriteFieldEnd();
      }
      if (__isset.SaleMonth) {
        field.Name = "SaleMonth";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SaleMonth);
        oprot.WriteFieldEnd();
      }
      if (__isset.SaleYear) {
        field.Name = "SaleYear";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SaleYear);
        oprot.WriteFieldEnd();
      }
      if (__isset.BeforDay) {
        field.Name = "BeforDay";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BeforDay);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TSaleTicketDate(");
      sb.Append("SaleId: ");
      sb.Append(SaleId);
      sb.Append(",SaleDay: ");
      sb.Append(SaleDay);
      sb.Append(",SaleMonth: ");
      sb.Append(SaleMonth);
      sb.Append(",SaleYear: ");
      sb.Append(SaleYear);
      sb.Append(",BeforDay: ");
      sb.Append(BeforDay);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
