/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace TransportService
{

  [Serializable]
  public partial class TSystemConfig : TBase
  {
    private List<TConfiguration> _Configurations;
    private List<TSaleTicketDate> _SaleTicketDates;
    private List<TTicketPrice> _TicketPrices;
    private List<TTransportPrice> _TransportPrices;
    private List<TGuaranteeFee> _GuaranteeFees;
    private List<TBus> _Buses;
    private List<TTour> _Tours;

    public List<TConfiguration> Configurations
    {
      get
      {
        return _Configurations;
      }
      set
      {
        __isset.Configurations = true;
        this._Configurations = value;
      }
    }

    public List<TSaleTicketDate> SaleTicketDates
    {
      get
      {
        return _SaleTicketDates;
      }
      set
      {
        __isset.SaleTicketDates = true;
        this._SaleTicketDates = value;
      }
    }

    public List<TTicketPrice> TicketPrices
    {
      get
      {
        return _TicketPrices;
      }
      set
      {
        __isset.TicketPrices = true;
        this._TicketPrices = value;
      }
    }

    public List<TTransportPrice> TransportPrices
    {
      get
      {
        return _TransportPrices;
      }
      set
      {
        __isset.TransportPrices = true;
        this._TransportPrices = value;
      }
    }

    public List<TGuaranteeFee> GuaranteeFees
    {
      get
      {
        return _GuaranteeFees;
      }
      set
      {
        __isset.GuaranteeFees = true;
        this._GuaranteeFees = value;
      }
    }

    public List<TBus> Buses
    {
      get
      {
        return _Buses;
      }
      set
      {
        __isset.Buses = true;
        this._Buses = value;
      }
    }

    public List<TTour> Tours
    {
      get
      {
        return _Tours;
      }
      set
      {
        __isset.Tours = true;
        this._Tours = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool Configurations;
      public bool SaleTicketDates;
      public bool TicketPrices;
      public bool TransportPrices;
      public bool GuaranteeFees;
      public bool Buses;
      public bool Tours;
    }

    public TSystemConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Configurations = new List<TConfiguration>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  TConfiguration _elem2 = new TConfiguration();
                  _elem2 = new TConfiguration();
                  _elem2.Read(iprot);
                  Configurations.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                SaleTicketDates = new List<TSaleTicketDate>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  TSaleTicketDate _elem5 = new TSaleTicketDate();
                  _elem5 = new TSaleTicketDate();
                  _elem5.Read(iprot);
                  SaleTicketDates.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                TicketPrices = new List<TTicketPrice>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  TTicketPrice _elem8 = new TTicketPrice();
                  _elem8 = new TTicketPrice();
                  _elem8.Read(iprot);
                  TicketPrices.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                TransportPrices = new List<TTransportPrice>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  TTransportPrice _elem11 = new TTransportPrice();
                  _elem11 = new TTransportPrice();
                  _elem11.Read(iprot);
                  TransportPrices.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                GuaranteeFees = new List<TGuaranteeFee>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  TGuaranteeFee _elem14 = new TGuaranteeFee();
                  _elem14 = new TGuaranteeFee();
                  _elem14.Read(iprot);
                  GuaranteeFees.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                Buses = new List<TBus>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  TBus _elem17 = new TBus();
                  _elem17 = new TBus();
                  _elem17.Read(iprot);
                  Buses.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                Tours = new List<TTour>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  TTour _elem20 = new TTour();
                  _elem20 = new TTour();
                  _elem20.Read(iprot);
                  Tours.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TSystemConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Configurations != null && __isset.Configurations) {
        field.Name = "Configurations";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Configurations.Count));
          foreach (TConfiguration _iter21 in Configurations)
          {
            _iter21.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SaleTicketDates != null && __isset.SaleTicketDates) {
        field.Name = "SaleTicketDates";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SaleTicketDates.Count));
          foreach (TSaleTicketDate _iter22 in SaleTicketDates)
          {
            _iter22.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TicketPrices != null && __isset.TicketPrices) {
        field.Name = "TicketPrices";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, TicketPrices.Count));
          foreach (TTicketPrice _iter23 in TicketPrices)
          {
            _iter23.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TransportPrices != null && __isset.TransportPrices) {
        field.Name = "TransportPrices";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, TransportPrices.Count));
          foreach (TTransportPrice _iter24 in TransportPrices)
          {
            _iter24.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (GuaranteeFees != null && __isset.GuaranteeFees) {
        field.Name = "GuaranteeFees";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, GuaranteeFees.Count));
          foreach (TGuaranteeFee _iter25 in GuaranteeFees)
          {
            _iter25.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Buses != null && __isset.Buses) {
        field.Name = "Buses";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Buses.Count));
          foreach (TBus _iter26 in Buses)
          {
            _iter26.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Tours != null && __isset.Tours) {
        field.Name = "Tours";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Tours.Count));
          foreach (TTour _iter27 in Tours)
          {
            _iter27.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TSystemConfig(");
      sb.Append("Configurations: ");
      sb.Append(Configurations);
      sb.Append(",SaleTicketDates: ");
      sb.Append(SaleTicketDates);
      sb.Append(",TicketPrices: ");
      sb.Append(TicketPrices);
      sb.Append(",TransportPrices: ");
      sb.Append(TransportPrices);
      sb.Append(",GuaranteeFees: ");
      sb.Append(GuaranteeFees);
      sb.Append(",Buses: ");
      sb.Append(Buses);
      sb.Append(",Tours: ");
      sb.Append(Tours);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
