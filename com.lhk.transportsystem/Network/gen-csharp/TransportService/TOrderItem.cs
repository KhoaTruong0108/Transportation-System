/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace TransportService
{

  [Serializable]
  public partial class TOrderItem : TBase
  {
    private string _ItemId;
    private string _OrderId;
    private string _Name;
    private int _Quantity;
    private double _Value;
    private string _Size;
    private double _Weight;
    private double _Cost;
    private string _OrderItemNumber;
    private string _Description;
    private bool _isDeleted;

    public string ItemId
    {
      get
      {
        return _ItemId;
      }
      set
      {
        __isset.ItemId = true;
        this._ItemId = value;
      }
    }

    public string OrderId
    {
      get
      {
        return _OrderId;
      }
      set
      {
        __isset.OrderId = true;
        this._OrderId = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public int Quantity
    {
      get
      {
        return _Quantity;
      }
      set
      {
        __isset.Quantity = true;
        this._Quantity = value;
      }
    }

    public double Value
    {
      get
      {
        return _Value;
      }
      set
      {
        __isset.Value = true;
        this._Value = value;
      }
    }

    public string Size
    {
      get
      {
        return _Size;
      }
      set
      {
        __isset.Size = true;
        this._Size = value;
      }
    }

    public double Weight
    {
      get
      {
        return _Weight;
      }
      set
      {
        __isset.Weight = true;
        this._Weight = value;
      }
    }

    public double Cost
    {
      get
      {
        return _Cost;
      }
      set
      {
        __isset.Cost = true;
        this._Cost = value;
      }
    }

    public string OrderItemNumber
    {
      get
      {
        return _OrderItemNumber;
      }
      set
      {
        __isset.OrderItemNumber = true;
        this._OrderItemNumber = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public bool IsDeleted
    {
      get
      {
        return _isDeleted;
      }
      set
      {
        __isset.isDeleted = true;
        this._isDeleted = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool ItemId;
      public bool OrderId;
      public bool Name;
      public bool Quantity;
      public bool Value;
      public bool Size;
      public bool Weight;
      public bool Cost;
      public bool OrderItemNumber;
      public bool Description;
      public bool isDeleted;
    }

    public TOrderItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ItemId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              OrderId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Quantity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Value = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Size = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              Weight = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              Cost = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              OrderItemNumber = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              IsDeleted = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TOrderItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ItemId != null && __isset.ItemId) {
        field.Name = "ItemId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemId);
        oprot.WriteFieldEnd();
      }
      if (OrderId != null && __isset.OrderId) {
        field.Name = "OrderId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.Name) {
        field.Name = "Name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.Quantity) {
        field.Name = "Quantity";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Quantity);
        oprot.WriteFieldEnd();
      }
      if (__isset.Value) {
        field.Name = "Value";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Value);
        oprot.WriteFieldEnd();
      }
      if (Size != null && __isset.Size) {
        field.Name = "Size";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Size);
        oprot.WriteFieldEnd();
      }
      if (__isset.Weight) {
        field.Name = "Weight";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Weight);
        oprot.WriteFieldEnd();
      }
      if (__isset.Cost) {
        field.Name = "Cost";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Cost);
        oprot.WriteFieldEnd();
      }
      if (OrderItemNumber != null && __isset.OrderItemNumber) {
        field.Name = "OrderItemNumber";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderItemNumber);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.Description) {
        field.Name = "Description";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (__isset.isDeleted) {
        field.Name = "isDeleted";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsDeleted);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TOrderItem(");
      sb.Append("ItemId: ");
      sb.Append(ItemId);
      sb.Append(",OrderId: ");
      sb.Append(OrderId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Quantity: ");
      sb.Append(Quantity);
      sb.Append(",Value: ");
      sb.Append(Value);
      sb.Append(",Size: ");
      sb.Append(Size);
      sb.Append(",Weight: ");
      sb.Append(Weight);
      sb.Append(",Cost: ");
      sb.Append(Cost);
      sb.Append(",OrderItemNumber: ");
      sb.Append(OrderItemNumber);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",IsDeleted: ");
      sb.Append(IsDeleted);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
