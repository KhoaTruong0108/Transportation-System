/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace TransportService
{
  public class TransportClient {
    public interface Iface {
      bool CheckConnection(string checkCode);
      string ReloadSystemSetting(List<TConfiguration> configurations);
      string ReloadSaleTicketDate(List<TSaleTicketDate> saleDates);
      string ReloadTicketPrice(List<TTicketPrice> priceTickets);
      string ReloadTransportPrice(List<TTransportPrice> priceTranportes);
      string ReloadTicketLoading(List<TTicket> tickets);
      string ReloadCustomerLoading(List<TCustomer> customers);
      string ReloadOrderLoading(List<TOrder> ordres, List<TOrderItem> orderItems);
      string CreateNewTicket(TTicket ticket);
      string CancelTicket(TTicket ticket);
      string UpdateTicket(TTicket ticket);
      string CreateTransportOrder(TOrder order, List<TOrderItem> orderItems);
      string UpdateOrderInfo(TOrder order, List<TOrderItem> orderItems);
      string CompleteOrder(TOrder order);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public bool CheckConnection(string checkCode)
      {
        send_CheckConnection(checkCode);
        return recv_CheckConnection();
      }

      public void send_CheckConnection(string checkCode)
      {
        oprot_.WriteMessageBegin(new TMessage("CheckConnection", TMessageType.Call, seqid_));
        CheckConnection_args args = new CheckConnection_args();
        args.CheckCode = checkCode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_CheckConnection()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CheckConnection_result result = new CheckConnection_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CheckConnection failed: unknown result");
      }

      public string ReloadSystemSetting(List<TConfiguration> configurations)
      {
        send_ReloadSystemSetting(configurations);
        return recv_ReloadSystemSetting();
      }

      public void send_ReloadSystemSetting(List<TConfiguration> configurations)
      {
        oprot_.WriteMessageBegin(new TMessage("ReloadSystemSetting", TMessageType.Call, seqid_));
        ReloadSystemSetting_args args = new ReloadSystemSetting_args();
        args.Configurations = configurations;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_ReloadSystemSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReloadSystemSetting_result result = new ReloadSystemSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReloadSystemSetting failed: unknown result");
      }

      public string ReloadSaleTicketDate(List<TSaleTicketDate> saleDates)
      {
        send_ReloadSaleTicketDate(saleDates);
        return recv_ReloadSaleTicketDate();
      }

      public void send_ReloadSaleTicketDate(List<TSaleTicketDate> saleDates)
      {
        oprot_.WriteMessageBegin(new TMessage("ReloadSaleTicketDate", TMessageType.Call, seqid_));
        ReloadSaleTicketDate_args args = new ReloadSaleTicketDate_args();
        args.SaleDates = saleDates;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_ReloadSaleTicketDate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReloadSaleTicketDate_result result = new ReloadSaleTicketDate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReloadSaleTicketDate failed: unknown result");
      }

      public string ReloadTicketPrice(List<TTicketPrice> priceTickets)
      {
        send_ReloadTicketPrice(priceTickets);
        return recv_ReloadTicketPrice();
      }

      public void send_ReloadTicketPrice(List<TTicketPrice> priceTickets)
      {
        oprot_.WriteMessageBegin(new TMessage("ReloadTicketPrice", TMessageType.Call, seqid_));
        ReloadTicketPrice_args args = new ReloadTicketPrice_args();
        args.PriceTickets = priceTickets;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_ReloadTicketPrice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReloadTicketPrice_result result = new ReloadTicketPrice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReloadTicketPrice failed: unknown result");
      }

      public string ReloadTransportPrice(List<TTransportPrice> priceTranportes)
      {
        send_ReloadTransportPrice(priceTranportes);
        return recv_ReloadTransportPrice();
      }

      public void send_ReloadTransportPrice(List<TTransportPrice> priceTranportes)
      {
        oprot_.WriteMessageBegin(new TMessage("ReloadTransportPrice", TMessageType.Call, seqid_));
        ReloadTransportPrice_args args = new ReloadTransportPrice_args();
        args.PriceTranportes = priceTranportes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_ReloadTransportPrice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReloadTransportPrice_result result = new ReloadTransportPrice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReloadTransportPrice failed: unknown result");
      }

      public string ReloadTicketLoading(List<TTicket> tickets)
      {
        send_ReloadTicketLoading(tickets);
        return recv_ReloadTicketLoading();
      }

      public void send_ReloadTicketLoading(List<TTicket> tickets)
      {
        oprot_.WriteMessageBegin(new TMessage("ReloadTicketLoading", TMessageType.Call, seqid_));
        ReloadTicketLoading_args args = new ReloadTicketLoading_args();
        args.Tickets = tickets;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_ReloadTicketLoading()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReloadTicketLoading_result result = new ReloadTicketLoading_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReloadTicketLoading failed: unknown result");
      }

      public string ReloadCustomerLoading(List<TCustomer> customers)
      {
        send_ReloadCustomerLoading(customers);
        return recv_ReloadCustomerLoading();
      }

      public void send_ReloadCustomerLoading(List<TCustomer> customers)
      {
        oprot_.WriteMessageBegin(new TMessage("ReloadCustomerLoading", TMessageType.Call, seqid_));
        ReloadCustomerLoading_args args = new ReloadCustomerLoading_args();
        args.Customers = customers;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_ReloadCustomerLoading()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReloadCustomerLoading_result result = new ReloadCustomerLoading_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReloadCustomerLoading failed: unknown result");
      }

      public string ReloadOrderLoading(List<TOrder> ordres, List<TOrderItem> orderItems)
      {
        send_ReloadOrderLoading(ordres, orderItems);
        return recv_ReloadOrderLoading();
      }

      public void send_ReloadOrderLoading(List<TOrder> ordres, List<TOrderItem> orderItems)
      {
        oprot_.WriteMessageBegin(new TMessage("ReloadOrderLoading", TMessageType.Call, seqid_));
        ReloadOrderLoading_args args = new ReloadOrderLoading_args();
        args.Ordres = ordres;
        args.OrderItems = orderItems;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_ReloadOrderLoading()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReloadOrderLoading_result result = new ReloadOrderLoading_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReloadOrderLoading failed: unknown result");
      }

      public string CreateNewTicket(TTicket ticket)
      {
        send_CreateNewTicket(ticket);
        return recv_CreateNewTicket();
      }

      public void send_CreateNewTicket(TTicket ticket)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateNewTicket", TMessageType.Call, seqid_));
        CreateNewTicket_args args = new CreateNewTicket_args();
        args.Ticket = ticket;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_CreateNewTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateNewTicket_result result = new CreateNewTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateNewTicket failed: unknown result");
      }

      public string CancelTicket(TTicket ticket)
      {
        send_CancelTicket(ticket);
        return recv_CancelTicket();
      }

      public void send_CancelTicket(TTicket ticket)
      {
        oprot_.WriteMessageBegin(new TMessage("CancelTicket", TMessageType.Call, seqid_));
        CancelTicket_args args = new CancelTicket_args();
        args.Ticket = ticket;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_CancelTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CancelTicket_result result = new CancelTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelTicket failed: unknown result");
      }

      public string UpdateTicket(TTicket ticket)
      {
        send_UpdateTicket(ticket);
        return recv_UpdateTicket();
      }

      public void send_UpdateTicket(TTicket ticket)
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateTicket", TMessageType.Call, seqid_));
        UpdateTicket_args args = new UpdateTicket_args();
        args.Ticket = ticket;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_UpdateTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateTicket_result result = new UpdateTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateTicket failed: unknown result");
      }

      public string CreateTransportOrder(TOrder order, List<TOrderItem> orderItems)
      {
        send_CreateTransportOrder(order, orderItems);
        return recv_CreateTransportOrder();
      }

      public void send_CreateTransportOrder(TOrder order, List<TOrderItem> orderItems)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateTransportOrder", TMessageType.Call, seqid_));
        CreateTransportOrder_args args = new CreateTransportOrder_args();
        args.Order = order;
        args.OrderItems = orderItems;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_CreateTransportOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateTransportOrder_result result = new CreateTransportOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateTransportOrder failed: unknown result");
      }

      public string UpdateOrderInfo(TOrder order, List<TOrderItem> orderItems)
      {
        send_UpdateOrderInfo(order, orderItems);
        return recv_UpdateOrderInfo();
      }

      public void send_UpdateOrderInfo(TOrder order, List<TOrderItem> orderItems)
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateOrderInfo", TMessageType.Call, seqid_));
        UpdateOrderInfo_args args = new UpdateOrderInfo_args();
        args.Order = order;
        args.OrderItems = orderItems;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_UpdateOrderInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateOrderInfo_result result = new UpdateOrderInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateOrderInfo failed: unknown result");
      }

      public string CompleteOrder(TOrder order)
      {
        send_CompleteOrder(order);
        return recv_CompleteOrder();
      }

      public void send_CompleteOrder(TOrder order)
      {
        oprot_.WriteMessageBegin(new TMessage("CompleteOrder", TMessageType.Call, seqid_));
        CompleteOrder_args args = new CompleteOrder_args();
        args.Order = order;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_CompleteOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CompleteOrder_result result = new CompleteOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CompleteOrder failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["CheckConnection"] = CheckConnection_Process;
        processMap_["ReloadSystemSetting"] = ReloadSystemSetting_Process;
        processMap_["ReloadSaleTicketDate"] = ReloadSaleTicketDate_Process;
        processMap_["ReloadTicketPrice"] = ReloadTicketPrice_Process;
        processMap_["ReloadTransportPrice"] = ReloadTransportPrice_Process;
        processMap_["ReloadTicketLoading"] = ReloadTicketLoading_Process;
        processMap_["ReloadCustomerLoading"] = ReloadCustomerLoading_Process;
        processMap_["ReloadOrderLoading"] = ReloadOrderLoading_Process;
        processMap_["CreateNewTicket"] = CreateNewTicket_Process;
        processMap_["CancelTicket"] = CancelTicket_Process;
        processMap_["UpdateTicket"] = UpdateTicket_Process;
        processMap_["CreateTransportOrder"] = CreateTransportOrder_Process;
        processMap_["UpdateOrderInfo"] = UpdateOrderInfo_Process;
        processMap_["CompleteOrder"] = CompleteOrder_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void CheckConnection_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CheckConnection_args args = new CheckConnection_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CheckConnection_result result = new CheckConnection_result();
        result.Success = iface_.CheckConnection(args.CheckCode);
        oprot.WriteMessageBegin(new TMessage("CheckConnection", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReloadSystemSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReloadSystemSetting_args args = new ReloadSystemSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReloadSystemSetting_result result = new ReloadSystemSetting_result();
        result.Success = iface_.ReloadSystemSetting(args.Configurations);
        oprot.WriteMessageBegin(new TMessage("ReloadSystemSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReloadSaleTicketDate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReloadSaleTicketDate_args args = new ReloadSaleTicketDate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReloadSaleTicketDate_result result = new ReloadSaleTicketDate_result();
        result.Success = iface_.ReloadSaleTicketDate(args.SaleDates);
        oprot.WriteMessageBegin(new TMessage("ReloadSaleTicketDate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReloadTicketPrice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReloadTicketPrice_args args = new ReloadTicketPrice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReloadTicketPrice_result result = new ReloadTicketPrice_result();
        result.Success = iface_.ReloadTicketPrice(args.PriceTickets);
        oprot.WriteMessageBegin(new TMessage("ReloadTicketPrice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReloadTransportPrice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReloadTransportPrice_args args = new ReloadTransportPrice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReloadTransportPrice_result result = new ReloadTransportPrice_result();
        result.Success = iface_.ReloadTransportPrice(args.PriceTranportes);
        oprot.WriteMessageBegin(new TMessage("ReloadTransportPrice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReloadTicketLoading_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReloadTicketLoading_args args = new ReloadTicketLoading_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReloadTicketLoading_result result = new ReloadTicketLoading_result();
        result.Success = iface_.ReloadTicketLoading(args.Tickets);
        oprot.WriteMessageBegin(new TMessage("ReloadTicketLoading", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReloadCustomerLoading_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReloadCustomerLoading_args args = new ReloadCustomerLoading_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReloadCustomerLoading_result result = new ReloadCustomerLoading_result();
        result.Success = iface_.ReloadCustomerLoading(args.Customers);
        oprot.WriteMessageBegin(new TMessage("ReloadCustomerLoading", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReloadOrderLoading_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReloadOrderLoading_args args = new ReloadOrderLoading_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReloadOrderLoading_result result = new ReloadOrderLoading_result();
        result.Success = iface_.ReloadOrderLoading(args.Ordres, args.OrderItems);
        oprot.WriteMessageBegin(new TMessage("ReloadOrderLoading", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateNewTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateNewTicket_args args = new CreateNewTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateNewTicket_result result = new CreateNewTicket_result();
        result.Success = iface_.CreateNewTicket(args.Ticket);
        oprot.WriteMessageBegin(new TMessage("CreateNewTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CancelTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CancelTicket_args args = new CancelTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CancelTicket_result result = new CancelTicket_result();
        result.Success = iface_.CancelTicket(args.Ticket);
        oprot.WriteMessageBegin(new TMessage("CancelTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateTicket_args args = new UpdateTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateTicket_result result = new UpdateTicket_result();
        result.Success = iface_.UpdateTicket(args.Ticket);
        oprot.WriteMessageBegin(new TMessage("UpdateTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateTransportOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateTransportOrder_args args = new CreateTransportOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateTransportOrder_result result = new CreateTransportOrder_result();
        result.Success = iface_.CreateTransportOrder(args.Order, args.OrderItems);
        oprot.WriteMessageBegin(new TMessage("CreateTransportOrder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateOrderInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateOrderInfo_args args = new UpdateOrderInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateOrderInfo_result result = new UpdateOrderInfo_result();
        result.Success = iface_.UpdateOrderInfo(args.Order, args.OrderItems);
        oprot.WriteMessageBegin(new TMessage("UpdateOrderInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CompleteOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CompleteOrder_args args = new CompleteOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CompleteOrder_result result = new CompleteOrder_result();
        result.Success = iface_.CompleteOrder(args.Order);
        oprot.WriteMessageBegin(new TMessage("CompleteOrder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class CheckConnection_args : TBase
    {
      private string _checkCode;

      public string CheckCode
      {
        get
        {
          return _checkCode;
        }
        set
        {
          __isset.checkCode = true;
          this._checkCode = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool checkCode;
      }

      public CheckConnection_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CheckCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CheckConnection_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CheckCode != null && __isset.checkCode) {
          field.Name = "checkCode";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CheckCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CheckConnection_args(");
        sb.Append("CheckCode: ");
        sb.Append(CheckCode);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CheckConnection_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public CheckConnection_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CheckConnection_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CheckConnection_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadSystemSetting_args : TBase
    {
      private List<TConfiguration> _configurations;

      public List<TConfiguration> Configurations
      {
        get
        {
          return _configurations;
        }
        set
        {
          __isset.configurations = true;
          this._configurations = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool configurations;
      }

      public ReloadSystemSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Configurations = new List<TConfiguration>();
                  TList _list72 = iprot.ReadListBegin();
                  for( int _i73 = 0; _i73 < _list72.Count; ++_i73)
                  {
                    TConfiguration _elem74 = new TConfiguration();
                    _elem74 = new TConfiguration();
                    _elem74.Read(iprot);
                    Configurations.Add(_elem74);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadSystemSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Configurations != null && __isset.configurations) {
          field.Name = "configurations";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Configurations.Count));
            foreach (TConfiguration _iter75 in Configurations)
            {
              _iter75.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadSystemSetting_args(");
        sb.Append("Configurations: ");
        sb.Append(Configurations);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadSystemSetting_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public ReloadSystemSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadSystemSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadSystemSetting_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadSaleTicketDate_args : TBase
    {
      private List<TSaleTicketDate> _saleDates;

      public List<TSaleTicketDate> SaleDates
      {
        get
        {
          return _saleDates;
        }
        set
        {
          __isset.saleDates = true;
          this._saleDates = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool saleDates;
      }

      public ReloadSaleTicketDate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  SaleDates = new List<TSaleTicketDate>();
                  TList _list76 = iprot.ReadListBegin();
                  for( int _i77 = 0; _i77 < _list76.Count; ++_i77)
                  {
                    TSaleTicketDate _elem78 = new TSaleTicketDate();
                    _elem78 = new TSaleTicketDate();
                    _elem78.Read(iprot);
                    SaleDates.Add(_elem78);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadSaleTicketDate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SaleDates != null && __isset.saleDates) {
          field.Name = "saleDates";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SaleDates.Count));
            foreach (TSaleTicketDate _iter79 in SaleDates)
            {
              _iter79.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadSaleTicketDate_args(");
        sb.Append("SaleDates: ");
        sb.Append(SaleDates);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadSaleTicketDate_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public ReloadSaleTicketDate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadSaleTicketDate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadSaleTicketDate_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadTicketPrice_args : TBase
    {
      private List<TTicketPrice> _priceTickets;

      public List<TTicketPrice> PriceTickets
      {
        get
        {
          return _priceTickets;
        }
        set
        {
          __isset.priceTickets = true;
          this._priceTickets = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool priceTickets;
      }

      public ReloadTicketPrice_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  PriceTickets = new List<TTicketPrice>();
                  TList _list80 = iprot.ReadListBegin();
                  for( int _i81 = 0; _i81 < _list80.Count; ++_i81)
                  {
                    TTicketPrice _elem82 = new TTicketPrice();
                    _elem82 = new TTicketPrice();
                    _elem82.Read(iprot);
                    PriceTickets.Add(_elem82);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadTicketPrice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PriceTickets != null && __isset.priceTickets) {
          field.Name = "priceTickets";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, PriceTickets.Count));
            foreach (TTicketPrice _iter83 in PriceTickets)
            {
              _iter83.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadTicketPrice_args(");
        sb.Append("PriceTickets: ");
        sb.Append(PriceTickets);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadTicketPrice_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public ReloadTicketPrice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadTicketPrice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadTicketPrice_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadTransportPrice_args : TBase
    {
      private List<TTransportPrice> _priceTranportes;

      public List<TTransportPrice> PriceTranportes
      {
        get
        {
          return _priceTranportes;
        }
        set
        {
          __isset.priceTranportes = true;
          this._priceTranportes = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool priceTranportes;
      }

      public ReloadTransportPrice_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  PriceTranportes = new List<TTransportPrice>();
                  TList _list84 = iprot.ReadListBegin();
                  for( int _i85 = 0; _i85 < _list84.Count; ++_i85)
                  {
                    TTransportPrice _elem86 = new TTransportPrice();
                    _elem86 = new TTransportPrice();
                    _elem86.Read(iprot);
                    PriceTranportes.Add(_elem86);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadTransportPrice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PriceTranportes != null && __isset.priceTranportes) {
          field.Name = "priceTranportes";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, PriceTranportes.Count));
            foreach (TTransportPrice _iter87 in PriceTranportes)
            {
              _iter87.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadTransportPrice_args(");
        sb.Append("PriceTranportes: ");
        sb.Append(PriceTranportes);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadTransportPrice_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public ReloadTransportPrice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadTransportPrice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadTransportPrice_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadTicketLoading_args : TBase
    {
      private List<TTicket> _tickets;

      public List<TTicket> Tickets
      {
        get
        {
          return _tickets;
        }
        set
        {
          __isset.tickets = true;
          this._tickets = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool tickets;
      }

      public ReloadTicketLoading_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Tickets = new List<TTicket>();
                  TList _list88 = iprot.ReadListBegin();
                  for( int _i89 = 0; _i89 < _list88.Count; ++_i89)
                  {
                    TTicket _elem90 = new TTicket();
                    _elem90 = new TTicket();
                    _elem90.Read(iprot);
                    Tickets.Add(_elem90);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadTicketLoading_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tickets != null && __isset.tickets) {
          field.Name = "tickets";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Tickets.Count));
            foreach (TTicket _iter91 in Tickets)
            {
              _iter91.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadTicketLoading_args(");
        sb.Append("Tickets: ");
        sb.Append(Tickets);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadTicketLoading_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public ReloadTicketLoading_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadTicketLoading_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadTicketLoading_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadCustomerLoading_args : TBase
    {
      private List<TCustomer> _customers;

      public List<TCustomer> Customers
      {
        get
        {
          return _customers;
        }
        set
        {
          __isset.customers = true;
          this._customers = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool customers;
      }

      public ReloadCustomerLoading_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Customers = new List<TCustomer>();
                  TList _list92 = iprot.ReadListBegin();
                  for( int _i93 = 0; _i93 < _list92.Count; ++_i93)
                  {
                    TCustomer _elem94 = new TCustomer();
                    _elem94 = new TCustomer();
                    _elem94.Read(iprot);
                    Customers.Add(_elem94);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadCustomerLoading_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Customers != null && __isset.customers) {
          field.Name = "customers";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Customers.Count));
            foreach (TCustomer _iter95 in Customers)
            {
              _iter95.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadCustomerLoading_args(");
        sb.Append("Customers: ");
        sb.Append(Customers);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadCustomerLoading_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public ReloadCustomerLoading_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadCustomerLoading_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadCustomerLoading_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadOrderLoading_args : TBase
    {
      private List<TOrder> _ordres;
      private List<TOrderItem> _orderItems;

      public List<TOrder> Ordres
      {
        get
        {
          return _ordres;
        }
        set
        {
          __isset.ordres = true;
          this._ordres = value;
        }
      }

      public List<TOrderItem> OrderItems
      {
        get
        {
          return _orderItems;
        }
        set
        {
          __isset.orderItems = true;
          this._orderItems = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ordres;
        public bool orderItems;
      }

      public ReloadOrderLoading_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Ordres = new List<TOrder>();
                  TList _list96 = iprot.ReadListBegin();
                  for( int _i97 = 0; _i97 < _list96.Count; ++_i97)
                  {
                    TOrder _elem98 = new TOrder();
                    _elem98 = new TOrder();
                    _elem98.Read(iprot);
                    Ordres.Add(_elem98);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  OrderItems = new List<TOrderItem>();
                  TList _list99 = iprot.ReadListBegin();
                  for( int _i100 = 0; _i100 < _list99.Count; ++_i100)
                  {
                    TOrderItem _elem101 = new TOrderItem();
                    _elem101 = new TOrderItem();
                    _elem101.Read(iprot);
                    OrderItems.Add(_elem101);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadOrderLoading_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ordres != null && __isset.ordres) {
          field.Name = "ordres";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Ordres.Count));
            foreach (TOrder _iter102 in Ordres)
            {
              _iter102.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (OrderItems != null && __isset.orderItems) {
          field.Name = "orderItems";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, OrderItems.Count));
            foreach (TOrderItem _iter103 in OrderItems)
            {
              _iter103.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadOrderLoading_args(");
        sb.Append("Ordres: ");
        sb.Append(Ordres);
        sb.Append(",OrderItems: ");
        sb.Append(OrderItems);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReloadOrderLoading_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public ReloadOrderLoading_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReloadOrderLoading_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReloadOrderLoading_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CreateNewTicket_args : TBase
    {
      private TTicket _ticket;

      public TTicket Ticket
      {
        get
        {
          return _ticket;
        }
        set
        {
          __isset.ticket = true;
          this._ticket = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ticket;
      }

      public CreateNewTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ticket = new TTicket();
                Ticket.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateNewTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ticket != null && __isset.ticket) {
          field.Name = "ticket";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ticket.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateNewTicket_args(");
        sb.Append("Ticket: ");
        sb.Append(Ticket== null ? "<null>" : Ticket.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CreateNewTicket_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public CreateNewTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateNewTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateNewTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CancelTicket_args : TBase
    {
      private TTicket _ticket;

      public TTicket Ticket
      {
        get
        {
          return _ticket;
        }
        set
        {
          __isset.ticket = true;
          this._ticket = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ticket;
      }

      public CancelTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ticket = new TTicket();
                Ticket.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CancelTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ticket != null && __isset.ticket) {
          field.Name = "ticket";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ticket.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CancelTicket_args(");
        sb.Append("Ticket: ");
        sb.Append(Ticket== null ? "<null>" : Ticket.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CancelTicket_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public CancelTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CancelTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CancelTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class UpdateTicket_args : TBase
    {
      private TTicket _ticket;

      public TTicket Ticket
      {
        get
        {
          return _ticket;
        }
        set
        {
          __isset.ticket = true;
          this._ticket = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ticket;
      }

      public UpdateTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ticket = new TTicket();
                Ticket.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ticket != null && __isset.ticket) {
          field.Name = "ticket";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ticket.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateTicket_args(");
        sb.Append("Ticket: ");
        sb.Append(Ticket== null ? "<null>" : Ticket.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class UpdateTicket_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public UpdateTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CreateTransportOrder_args : TBase
    {
      private TOrder _order;
      private List<TOrderItem> _orderItems;

      public TOrder Order
      {
        get
        {
          return _order;
        }
        set
        {
          __isset.order = true;
          this._order = value;
        }
      }

      public List<TOrderItem> OrderItems
      {
        get
        {
          return _orderItems;
        }
        set
        {
          __isset.orderItems = true;
          this._orderItems = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool order;
        public bool orderItems;
      }

      public CreateTransportOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Order = new TOrder();
                Order.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  OrderItems = new List<TOrderItem>();
                  TList _list104 = iprot.ReadListBegin();
                  for( int _i105 = 0; _i105 < _list104.Count; ++_i105)
                  {
                    TOrderItem _elem106 = new TOrderItem();
                    _elem106 = new TOrderItem();
                    _elem106.Read(iprot);
                    OrderItems.Add(_elem106);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateTransportOrder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Order != null && __isset.order) {
          field.Name = "order";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Order.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderItems != null && __isset.orderItems) {
          field.Name = "orderItems";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, OrderItems.Count));
            foreach (TOrderItem _iter107 in OrderItems)
            {
              _iter107.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateTransportOrder_args(");
        sb.Append("Order: ");
        sb.Append(Order== null ? "<null>" : Order.ToString());
        sb.Append(",OrderItems: ");
        sb.Append(OrderItems);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CreateTransportOrder_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public CreateTransportOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateTransportOrder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateTransportOrder_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class UpdateOrderInfo_args : TBase
    {
      private TOrder _order;
      private List<TOrderItem> _orderItems;

      public TOrder Order
      {
        get
        {
          return _order;
        }
        set
        {
          __isset.order = true;
          this._order = value;
        }
      }

      public List<TOrderItem> OrderItems
      {
        get
        {
          return _orderItems;
        }
        set
        {
          __isset.orderItems = true;
          this._orderItems = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool order;
        public bool orderItems;
      }

      public UpdateOrderInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Order = new TOrder();
                Order.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  OrderItems = new List<TOrderItem>();
                  TList _list108 = iprot.ReadListBegin();
                  for( int _i109 = 0; _i109 < _list108.Count; ++_i109)
                  {
                    TOrderItem _elem110 = new TOrderItem();
                    _elem110 = new TOrderItem();
                    _elem110.Read(iprot);
                    OrderItems.Add(_elem110);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateOrderInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Order != null && __isset.order) {
          field.Name = "order";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Order.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderItems != null && __isset.orderItems) {
          field.Name = "orderItems";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, OrderItems.Count));
            foreach (TOrderItem _iter111 in OrderItems)
            {
              _iter111.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateOrderInfo_args(");
        sb.Append("Order: ");
        sb.Append(Order== null ? "<null>" : Order.ToString());
        sb.Append(",OrderItems: ");
        sb.Append(OrderItems);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class UpdateOrderInfo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public UpdateOrderInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateOrderInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateOrderInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CompleteOrder_args : TBase
    {
      private TOrder _order;

      public TOrder Order
      {
        get
        {
          return _order;
        }
        set
        {
          __isset.order = true;
          this._order = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool order;
      }

      public CompleteOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Order = new TOrder();
                Order.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CompleteOrder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Order != null && __isset.order) {
          field.Name = "order";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Order.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CompleteOrder_args(");
        sb.Append("Order: ");
        sb.Append(Order== null ? "<null>" : Order.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CompleteOrder_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public CompleteOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CompleteOrder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CompleteOrder_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
