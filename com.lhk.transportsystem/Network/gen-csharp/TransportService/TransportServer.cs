/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace TransportService
{
  public class TransportServer {
    public interface Iface {
      TUser Login(string userName, string password, string senderIP, string senderPort);
      string Logout(string userName, string senderIP, string senderPort);
      TSystemConfig LoadSystemConfig();
      List<TTicket> LoadTickets();
      List<TCustomer> LoadCustomers();
      List<TIrregularOrder> LoadIrregularOrders();
      List<TRegularOrder> LoadRegularOrders();
      List<TOrderItem> LoadOrderItems();
      List<TTicket> SyncTickets();
      List<TIrregularOrder> SyncIrregularOrders();
      List<TRegularOrder> SyncRegularOrders();
      List<TOrderItem> SyncOrderItems();
      string InsertTicket(TTicket ticket, string userId);
      string CancelTicket(TTicket tiket, string userId);
      string UpdateTicket(TTicket ticket, string userId);
      string CreateOrder(TOrder order, List<TOrderItem> orderItem, string userId);
      string UpdateOrder(TOrder order, List<TOrderItem> orderItem, string userId);
      string UpdateSingleOrderInfo(TOrder order, string userId);
      string DeleteOrder(TOrder order, string userId);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public TUser Login(string userName, string password, string senderIP, string senderPort)
      {
        send_Login(userName, password, senderIP, senderPort);
        return recv_Login();
      }

      public void send_Login(string userName, string password, string senderIP, string senderPort)
      {
        oprot_.WriteMessageBegin(new TMessage("Login", TMessageType.Call, seqid_));
        Login_args args = new Login_args();
        args.UserName = userName;
        args.Password = password;
        args.SenderIP = senderIP;
        args.SenderPort = senderPort;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TUser recv_Login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Login_result result = new Login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Login failed: unknown result");
      }

      public string Logout(string userName, string senderIP, string senderPort)
      {
        send_Logout(userName, senderIP, senderPort);
        return recv_Logout();
      }

      public void send_Logout(string userName, string senderIP, string senderPort)
      {
        oprot_.WriteMessageBegin(new TMessage("Logout", TMessageType.Call, seqid_));
        Logout_args args = new Logout_args();
        args.UserName = userName;
        args.SenderIP = senderIP;
        args.SenderPort = senderPort;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_Logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Logout_result result = new Logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Logout failed: unknown result");
      }

      public TSystemConfig LoadSystemConfig()
      {
        send_LoadSystemConfig();
        return recv_LoadSystemConfig();
      }

      public void send_LoadSystemConfig()
      {
        oprot_.WriteMessageBegin(new TMessage("LoadSystemConfig", TMessageType.Call, seqid_));
        LoadSystemConfig_args args = new LoadSystemConfig_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TSystemConfig recv_LoadSystemConfig()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LoadSystemConfig_result result = new LoadSystemConfig_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LoadSystemConfig failed: unknown result");
      }

      public List<TTicket> LoadTickets()
      {
        send_LoadTickets();
        return recv_LoadTickets();
      }

      public void send_LoadTickets()
      {
        oprot_.WriteMessageBegin(new TMessage("LoadTickets", TMessageType.Call, seqid_));
        LoadTickets_args args = new LoadTickets_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TTicket> recv_LoadTickets()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LoadTickets_result result = new LoadTickets_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LoadTickets failed: unknown result");
      }

      public List<TCustomer> LoadCustomers()
      {
        send_LoadCustomers();
        return recv_LoadCustomers();
      }

      public void send_LoadCustomers()
      {
        oprot_.WriteMessageBegin(new TMessage("LoadCustomers", TMessageType.Call, seqid_));
        LoadCustomers_args args = new LoadCustomers_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TCustomer> recv_LoadCustomers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LoadCustomers_result result = new LoadCustomers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LoadCustomers failed: unknown result");
      }

      public List<TIrregularOrder> LoadIrregularOrders()
      {
        send_LoadIrregularOrders();
        return recv_LoadIrregularOrders();
      }

      public void send_LoadIrregularOrders()
      {
        oprot_.WriteMessageBegin(new TMessage("LoadIrregularOrders", TMessageType.Call, seqid_));
        LoadIrregularOrders_args args = new LoadIrregularOrders_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TIrregularOrder> recv_LoadIrregularOrders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LoadIrregularOrders_result result = new LoadIrregularOrders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LoadIrregularOrders failed: unknown result");
      }

      public List<TRegularOrder> LoadRegularOrders()
      {
        send_LoadRegularOrders();
        return recv_LoadRegularOrders();
      }

      public void send_LoadRegularOrders()
      {
        oprot_.WriteMessageBegin(new TMessage("LoadRegularOrders", TMessageType.Call, seqid_));
        LoadRegularOrders_args args = new LoadRegularOrders_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TRegularOrder> recv_LoadRegularOrders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LoadRegularOrders_result result = new LoadRegularOrders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LoadRegularOrders failed: unknown result");
      }

      public List<TOrderItem> LoadOrderItems()
      {
        send_LoadOrderItems();
        return recv_LoadOrderItems();
      }

      public void send_LoadOrderItems()
      {
        oprot_.WriteMessageBegin(new TMessage("LoadOrderItems", TMessageType.Call, seqid_));
        LoadOrderItems_args args = new LoadOrderItems_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TOrderItem> recv_LoadOrderItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LoadOrderItems_result result = new LoadOrderItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LoadOrderItems failed: unknown result");
      }

      public List<TTicket> SyncTickets()
      {
        send_SyncTickets();
        return recv_SyncTickets();
      }

      public void send_SyncTickets()
      {
        oprot_.WriteMessageBegin(new TMessage("SyncTickets", TMessageType.Call, seqid_));
        SyncTickets_args args = new SyncTickets_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TTicket> recv_SyncTickets()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SyncTickets_result result = new SyncTickets_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SyncTickets failed: unknown result");
      }

      public List<TIrregularOrder> SyncIrregularOrders()
      {
        send_SyncIrregularOrders();
        return recv_SyncIrregularOrders();
      }

      public void send_SyncIrregularOrders()
      {
        oprot_.WriteMessageBegin(new TMessage("SyncIrregularOrders", TMessageType.Call, seqid_));
        SyncIrregularOrders_args args = new SyncIrregularOrders_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TIrregularOrder> recv_SyncIrregularOrders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SyncIrregularOrders_result result = new SyncIrregularOrders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SyncIrregularOrders failed: unknown result");
      }

      public List<TRegularOrder> SyncRegularOrders()
      {
        send_SyncRegularOrders();
        return recv_SyncRegularOrders();
      }

      public void send_SyncRegularOrders()
      {
        oprot_.WriteMessageBegin(new TMessage("SyncRegularOrders", TMessageType.Call, seqid_));
        SyncRegularOrders_args args = new SyncRegularOrders_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TRegularOrder> recv_SyncRegularOrders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SyncRegularOrders_result result = new SyncRegularOrders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SyncRegularOrders failed: unknown result");
      }

      public List<TOrderItem> SyncOrderItems()
      {
        send_SyncOrderItems();
        return recv_SyncOrderItems();
      }

      public void send_SyncOrderItems()
      {
        oprot_.WriteMessageBegin(new TMessage("SyncOrderItems", TMessageType.Call, seqid_));
        SyncOrderItems_args args = new SyncOrderItems_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TOrderItem> recv_SyncOrderItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SyncOrderItems_result result = new SyncOrderItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SyncOrderItems failed: unknown result");
      }

      public string InsertTicket(TTicket ticket, string userId)
      {
        send_InsertTicket(ticket, userId);
        return recv_InsertTicket();
      }

      public void send_InsertTicket(TTicket ticket, string userId)
      {
        oprot_.WriteMessageBegin(new TMessage("InsertTicket", TMessageType.Call, seqid_));
        InsertTicket_args args = new InsertTicket_args();
        args.Ticket = ticket;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_InsertTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        InsertTicket_result result = new InsertTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "InsertTicket failed: unknown result");
      }

      public string CancelTicket(TTicket tiket, string userId)
      {
        send_CancelTicket(tiket, userId);
        return recv_CancelTicket();
      }

      public void send_CancelTicket(TTicket tiket, string userId)
      {
        oprot_.WriteMessageBegin(new TMessage("CancelTicket", TMessageType.Call, seqid_));
        CancelTicket_args args = new CancelTicket_args();
        args.Tiket = tiket;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_CancelTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CancelTicket_result result = new CancelTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelTicket failed: unknown result");
      }

      public string UpdateTicket(TTicket ticket, string userId)
      {
        send_UpdateTicket(ticket, userId);
        return recv_UpdateTicket();
      }

      public void send_UpdateTicket(TTicket ticket, string userId)
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateTicket", TMessageType.Call, seqid_));
        UpdateTicket_args args = new UpdateTicket_args();
        args.Ticket = ticket;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_UpdateTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateTicket_result result = new UpdateTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateTicket failed: unknown result");
      }

      public string CreateOrder(TOrder order, List<TOrderItem> orderItem, string userId)
      {
        send_CreateOrder(order, orderItem, userId);
        return recv_CreateOrder();
      }

      public void send_CreateOrder(TOrder order, List<TOrderItem> orderItem, string userId)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateOrder", TMessageType.Call, seqid_));
        CreateOrder_args args = new CreateOrder_args();
        args.Order = order;
        args.OrderItem = orderItem;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_CreateOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateOrder_result result = new CreateOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateOrder failed: unknown result");
      }

      public string UpdateOrder(TOrder order, List<TOrderItem> orderItem, string userId)
      {
        send_UpdateOrder(order, orderItem, userId);
        return recv_UpdateOrder();
      }

      public void send_UpdateOrder(TOrder order, List<TOrderItem> orderItem, string userId)
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateOrder", TMessageType.Call, seqid_));
        UpdateOrder_args args = new UpdateOrder_args();
        args.Order = order;
        args.OrderItem = orderItem;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_UpdateOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateOrder_result result = new UpdateOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateOrder failed: unknown result");
      }

      public string UpdateSingleOrderInfo(TOrder order, string userId)
      {
        send_UpdateSingleOrderInfo(order, userId);
        return recv_UpdateSingleOrderInfo();
      }

      public void send_UpdateSingleOrderInfo(TOrder order, string userId)
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateSingleOrderInfo", TMessageType.Call, seqid_));
        UpdateSingleOrderInfo_args args = new UpdateSingleOrderInfo_args();
        args.Order = order;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_UpdateSingleOrderInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateSingleOrderInfo_result result = new UpdateSingleOrderInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateSingleOrderInfo failed: unknown result");
      }

      public string DeleteOrder(TOrder order, string userId)
      {
        send_DeleteOrder(order, userId);
        return recv_DeleteOrder();
      }

      public void send_DeleteOrder(TOrder order, string userId)
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteOrder", TMessageType.Call, seqid_));
        DeleteOrder_args args = new DeleteOrder_args();
        args.Order = order;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_DeleteOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteOrder_result result = new DeleteOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteOrder failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["Login"] = Login_Process;
        processMap_["Logout"] = Logout_Process;
        processMap_["LoadSystemConfig"] = LoadSystemConfig_Process;
        processMap_["LoadTickets"] = LoadTickets_Process;
        processMap_["LoadCustomers"] = LoadCustomers_Process;
        processMap_["LoadIrregularOrders"] = LoadIrregularOrders_Process;
        processMap_["LoadRegularOrders"] = LoadRegularOrders_Process;
        processMap_["LoadOrderItems"] = LoadOrderItems_Process;
        processMap_["SyncTickets"] = SyncTickets_Process;
        processMap_["SyncIrregularOrders"] = SyncIrregularOrders_Process;
        processMap_["SyncRegularOrders"] = SyncRegularOrders_Process;
        processMap_["SyncOrderItems"] = SyncOrderItems_Process;
        processMap_["InsertTicket"] = InsertTicket_Process;
        processMap_["CancelTicket"] = CancelTicket_Process;
        processMap_["UpdateTicket"] = UpdateTicket_Process;
        processMap_["CreateOrder"] = CreateOrder_Process;
        processMap_["UpdateOrder"] = UpdateOrder_Process;
        processMap_["UpdateSingleOrderInfo"] = UpdateSingleOrderInfo_Process;
        processMap_["DeleteOrder"] = DeleteOrder_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Login_args args = new Login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Login_result result = new Login_result();
        result.Success = iface_.Login(args.UserName, args.Password, args.SenderIP, args.SenderPort);
        oprot.WriteMessageBegin(new TMessage("Login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Logout_args args = new Logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Logout_result result = new Logout_result();
        result.Success = iface_.Logout(args.UserName, args.SenderIP, args.SenderPort);
        oprot.WriteMessageBegin(new TMessage("Logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LoadSystemConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LoadSystemConfig_args args = new LoadSystemConfig_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LoadSystemConfig_result result = new LoadSystemConfig_result();
        result.Success = iface_.LoadSystemConfig();
        oprot.WriteMessageBegin(new TMessage("LoadSystemConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LoadTickets_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LoadTickets_args args = new LoadTickets_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LoadTickets_result result = new LoadTickets_result();
        result.Success = iface_.LoadTickets();
        oprot.WriteMessageBegin(new TMessage("LoadTickets", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LoadCustomers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LoadCustomers_args args = new LoadCustomers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LoadCustomers_result result = new LoadCustomers_result();
        result.Success = iface_.LoadCustomers();
        oprot.WriteMessageBegin(new TMessage("LoadCustomers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LoadIrregularOrders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LoadIrregularOrders_args args = new LoadIrregularOrders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LoadIrregularOrders_result result = new LoadIrregularOrders_result();
        result.Success = iface_.LoadIrregularOrders();
        oprot.WriteMessageBegin(new TMessage("LoadIrregularOrders", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LoadRegularOrders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LoadRegularOrders_args args = new LoadRegularOrders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LoadRegularOrders_result result = new LoadRegularOrders_result();
        result.Success = iface_.LoadRegularOrders();
        oprot.WriteMessageBegin(new TMessage("LoadRegularOrders", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LoadOrderItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LoadOrderItems_args args = new LoadOrderItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LoadOrderItems_result result = new LoadOrderItems_result();
        result.Success = iface_.LoadOrderItems();
        oprot.WriteMessageBegin(new TMessage("LoadOrderItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SyncTickets_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SyncTickets_args args = new SyncTickets_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SyncTickets_result result = new SyncTickets_result();
        result.Success = iface_.SyncTickets();
        oprot.WriteMessageBegin(new TMessage("SyncTickets", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SyncIrregularOrders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SyncIrregularOrders_args args = new SyncIrregularOrders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SyncIrregularOrders_result result = new SyncIrregularOrders_result();
        result.Success = iface_.SyncIrregularOrders();
        oprot.WriteMessageBegin(new TMessage("SyncIrregularOrders", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SyncRegularOrders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SyncRegularOrders_args args = new SyncRegularOrders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SyncRegularOrders_result result = new SyncRegularOrders_result();
        result.Success = iface_.SyncRegularOrders();
        oprot.WriteMessageBegin(new TMessage("SyncRegularOrders", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SyncOrderItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SyncOrderItems_args args = new SyncOrderItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SyncOrderItems_result result = new SyncOrderItems_result();
        result.Success = iface_.SyncOrderItems();
        oprot.WriteMessageBegin(new TMessage("SyncOrderItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void InsertTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        InsertTicket_args args = new InsertTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        InsertTicket_result result = new InsertTicket_result();
        result.Success = iface_.InsertTicket(args.Ticket, args.UserId);
        oprot.WriteMessageBegin(new TMessage("InsertTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CancelTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CancelTicket_args args = new CancelTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CancelTicket_result result = new CancelTicket_result();
        result.Success = iface_.CancelTicket(args.Tiket, args.UserId);
        oprot.WriteMessageBegin(new TMessage("CancelTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateTicket_args args = new UpdateTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateTicket_result result = new UpdateTicket_result();
        result.Success = iface_.UpdateTicket(args.Ticket, args.UserId);
        oprot.WriteMessageBegin(new TMessage("UpdateTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateOrder_args args = new CreateOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateOrder_result result = new CreateOrder_result();
        result.Success = iface_.CreateOrder(args.Order, args.OrderItem, args.UserId);
        oprot.WriteMessageBegin(new TMessage("CreateOrder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateOrder_args args = new UpdateOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateOrder_result result = new UpdateOrder_result();
        result.Success = iface_.UpdateOrder(args.Order, args.OrderItem, args.UserId);
        oprot.WriteMessageBegin(new TMessage("UpdateOrder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateSingleOrderInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateSingleOrderInfo_args args = new UpdateSingleOrderInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateSingleOrderInfo_result result = new UpdateSingleOrderInfo_result();
        result.Success = iface_.UpdateSingleOrderInfo(args.Order, args.UserId);
        oprot.WriteMessageBegin(new TMessage("UpdateSingleOrderInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteOrder_args args = new DeleteOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteOrder_result result = new DeleteOrder_result();
        result.Success = iface_.DeleteOrder(args.Order, args.UserId);
        oprot.WriteMessageBegin(new TMessage("DeleteOrder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class Login_args : TBase
    {
      private string _userName;
      private string _password;
      private string _senderIP;
      private string _senderPort;

      public string UserName
      {
        get
        {
          return _userName;
        }
        set
        {
          __isset.userName = true;
          this._userName = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public string SenderIP
      {
        get
        {
          return _senderIP;
        }
        set
        {
          __isset.senderIP = true;
          this._senderIP = value;
        }
      }

      public string SenderPort
      {
        get
        {
          return _senderPort;
        }
        set
        {
          __isset.senderPort = true;
          this._senderPort = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool userName;
        public bool password;
        public bool senderIP;
        public bool senderPort;
      }

      public Login_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SenderIP = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                SenderPort = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserName != null && __isset.userName) {
          field.Name = "userName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserName);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (SenderIP != null && __isset.senderIP) {
          field.Name = "senderIP";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SenderIP);
          oprot.WriteFieldEnd();
        }
        if (SenderPort != null && __isset.senderPort) {
          field.Name = "senderPort";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SenderPort);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Login_args(");
        sb.Append("UserName: ");
        sb.Append(UserName);
        sb.Append(",Password: ");
        sb.Append(Password);
        sb.Append(",SenderIP: ");
        sb.Append(SenderIP);
        sb.Append(",SenderPort: ");
        sb.Append(SenderPort);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Login_result : TBase
    {
      private TUser _success;

      public TUser Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public Login_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TUser();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Login_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Login_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Logout_args : TBase
    {
      private string _userName;
      private string _senderIP;
      private string _senderPort;

      public string UserName
      {
        get
        {
          return _userName;
        }
        set
        {
          __isset.userName = true;
          this._userName = value;
        }
      }

      public string SenderIP
      {
        get
        {
          return _senderIP;
        }
        set
        {
          __isset.senderIP = true;
          this._senderIP = value;
        }
      }

      public string SenderPort
      {
        get
        {
          return _senderPort;
        }
        set
        {
          __isset.senderPort = true;
          this._senderPort = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool userName;
        public bool senderIP;
        public bool senderPort;
      }

      public Logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                SenderIP = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SenderPort = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Logout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserName != null && __isset.userName) {
          field.Name = "userName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserName);
          oprot.WriteFieldEnd();
        }
        if (SenderIP != null && __isset.senderIP) {
          field.Name = "senderIP";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SenderIP);
          oprot.WriteFieldEnd();
        }
        if (SenderPort != null && __isset.senderPort) {
          field.Name = "senderPort";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SenderPort);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Logout_args(");
        sb.Append("UserName: ");
        sb.Append(UserName);
        sb.Append(",SenderIP: ");
        sb.Append(SenderIP);
        sb.Append(",SenderPort: ");
        sb.Append(SenderPort);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Logout_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public Logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Logout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Logout_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadSystemConfig_args : TBase
    {

      public LoadSystemConfig_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadSystemConfig_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadSystemConfig_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadSystemConfig_result : TBase
    {
      private TSystemConfig _success;

      public TSystemConfig Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public LoadSystemConfig_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSystemConfig();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadSystemConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadSystemConfig_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadTickets_args : TBase
    {

      public LoadTickets_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadTickets_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadTickets_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadTickets_result : TBase
    {
      private List<TTicket> _success;

      public List<TTicket> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public LoadTickets_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TTicket>();
                  TList _list28 = iprot.ReadListBegin();
                  for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    TTicket _elem30 = new TTicket();
                    _elem30 = new TTicket();
                    _elem30.Read(iprot);
                    Success.Add(_elem30);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadTickets_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TTicket _iter31 in Success)
              {
                _iter31.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadTickets_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadCustomers_args : TBase
    {

      public LoadCustomers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadCustomers_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadCustomers_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadCustomers_result : TBase
    {
      private List<TCustomer> _success;

      public List<TCustomer> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public LoadCustomers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TCustomer>();
                  TList _list32 = iprot.ReadListBegin();
                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    TCustomer _elem34 = new TCustomer();
                    _elem34 = new TCustomer();
                    _elem34.Read(iprot);
                    Success.Add(_elem34);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadCustomers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TCustomer _iter35 in Success)
              {
                _iter35.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadCustomers_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadIrregularOrders_args : TBase
    {

      public LoadIrregularOrders_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadIrregularOrders_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadIrregularOrders_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadIrregularOrders_result : TBase
    {
      private List<TIrregularOrder> _success;

      public List<TIrregularOrder> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public LoadIrregularOrders_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TIrregularOrder>();
                  TList _list36 = iprot.ReadListBegin();
                  for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    TIrregularOrder _elem38 = new TIrregularOrder();
                    _elem38 = new TIrregularOrder();
                    _elem38.Read(iprot);
                    Success.Add(_elem38);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadIrregularOrders_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TIrregularOrder _iter39 in Success)
              {
                _iter39.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadIrregularOrders_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadRegularOrders_args : TBase
    {

      public LoadRegularOrders_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadRegularOrders_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadRegularOrders_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadRegularOrders_result : TBase
    {
      private List<TRegularOrder> _success;

      public List<TRegularOrder> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public LoadRegularOrders_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TRegularOrder>();
                  TList _list40 = iprot.ReadListBegin();
                  for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                  {
                    TRegularOrder _elem42 = new TRegularOrder();
                    _elem42 = new TRegularOrder();
                    _elem42.Read(iprot);
                    Success.Add(_elem42);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadRegularOrders_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TRegularOrder _iter43 in Success)
              {
                _iter43.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadRegularOrders_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadOrderItems_args : TBase
    {

      public LoadOrderItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadOrderItems_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadOrderItems_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LoadOrderItems_result : TBase
    {
      private List<TOrderItem> _success;

      public List<TOrderItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public LoadOrderItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TOrderItem>();
                  TList _list44 = iprot.ReadListBegin();
                  for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    TOrderItem _elem46 = new TOrderItem();
                    _elem46 = new TOrderItem();
                    _elem46.Read(iprot);
                    Success.Add(_elem46);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoadOrderItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TOrderItem _iter47 in Success)
              {
                _iter47.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoadOrderItems_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SyncTickets_args : TBase
    {

      public SyncTickets_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SyncTickets_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SyncTickets_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SyncTickets_result : TBase
    {
      private List<TTicket> _success;

      public List<TTicket> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SyncTickets_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TTicket>();
                  TList _list48 = iprot.ReadListBegin();
                  for( int _i49 = 0; _i49 < _list48.Count; ++_i49)
                  {
                    TTicket _elem50 = new TTicket();
                    _elem50 = new TTicket();
                    _elem50.Read(iprot);
                    Success.Add(_elem50);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SyncTickets_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TTicket _iter51 in Success)
              {
                _iter51.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SyncTickets_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SyncIrregularOrders_args : TBase
    {

      public SyncIrregularOrders_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SyncIrregularOrders_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SyncIrregularOrders_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SyncIrregularOrders_result : TBase
    {
      private List<TIrregularOrder> _success;

      public List<TIrregularOrder> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SyncIrregularOrders_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TIrregularOrder>();
                  TList _list52 = iprot.ReadListBegin();
                  for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                  {
                    TIrregularOrder _elem54 = new TIrregularOrder();
                    _elem54 = new TIrregularOrder();
                    _elem54.Read(iprot);
                    Success.Add(_elem54);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SyncIrregularOrders_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TIrregularOrder _iter55 in Success)
              {
                _iter55.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SyncIrregularOrders_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SyncRegularOrders_args : TBase
    {

      public SyncRegularOrders_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SyncRegularOrders_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SyncRegularOrders_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SyncRegularOrders_result : TBase
    {
      private List<TRegularOrder> _success;

      public List<TRegularOrder> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SyncRegularOrders_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TRegularOrder>();
                  TList _list56 = iprot.ReadListBegin();
                  for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                  {
                    TRegularOrder _elem58 = new TRegularOrder();
                    _elem58 = new TRegularOrder();
                    _elem58.Read(iprot);
                    Success.Add(_elem58);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SyncRegularOrders_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TRegularOrder _iter59 in Success)
              {
                _iter59.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SyncRegularOrders_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SyncOrderItems_args : TBase
    {

      public SyncOrderItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SyncOrderItems_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SyncOrderItems_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SyncOrderItems_result : TBase
    {
      private List<TOrderItem> _success;

      public List<TOrderItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SyncOrderItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TOrderItem>();
                  TList _list60 = iprot.ReadListBegin();
                  for( int _i61 = 0; _i61 < _list60.Count; ++_i61)
                  {
                    TOrderItem _elem62 = new TOrderItem();
                    _elem62 = new TOrderItem();
                    _elem62.Read(iprot);
                    Success.Add(_elem62);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SyncOrderItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TOrderItem _iter63 in Success)
              {
                _iter63.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SyncOrderItems_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class InsertTicket_args : TBase
    {
      private TTicket _ticket;
      private string _userId;

      public TTicket Ticket
      {
        get
        {
          return _ticket;
        }
        set
        {
          __isset.ticket = true;
          this._ticket = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ticket;
        public bool userId;
      }

      public InsertTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ticket = new TTicket();
                Ticket.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("InsertTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ticket != null && __isset.ticket) {
          field.Name = "ticket";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ticket.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("InsertTicket_args(");
        sb.Append("Ticket: ");
        sb.Append(Ticket== null ? "<null>" : Ticket.ToString());
        sb.Append(",UserId: ");
        sb.Append(UserId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class InsertTicket_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public InsertTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("InsertTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("InsertTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CancelTicket_args : TBase
    {
      private TTicket _tiket;
      private string _userId;

      public TTicket Tiket
      {
        get
        {
          return _tiket;
        }
        set
        {
          __isset.tiket = true;
          this._tiket = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool tiket;
        public bool userId;
      }

      public CancelTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Tiket = new TTicket();
                Tiket.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CancelTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tiket != null && __isset.tiket) {
          field.Name = "tiket";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Tiket.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CancelTicket_args(");
        sb.Append("Tiket: ");
        sb.Append(Tiket== null ? "<null>" : Tiket.ToString());
        sb.Append(",UserId: ");
        sb.Append(UserId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CancelTicket_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public CancelTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CancelTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CancelTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class UpdateTicket_args : TBase
    {
      private TTicket _ticket;
      private string _userId;

      public TTicket Ticket
      {
        get
        {
          return _ticket;
        }
        set
        {
          __isset.ticket = true;
          this._ticket = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ticket;
        public bool userId;
      }

      public UpdateTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ticket = new TTicket();
                Ticket.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ticket != null && __isset.ticket) {
          field.Name = "ticket";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ticket.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateTicket_args(");
        sb.Append("Ticket: ");
        sb.Append(Ticket== null ? "<null>" : Ticket.ToString());
        sb.Append(",UserId: ");
        sb.Append(UserId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class UpdateTicket_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public UpdateTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CreateOrder_args : TBase
    {
      private TOrder _order;
      private List<TOrderItem> _orderItem;
      private string _userId;

      public TOrder Order
      {
        get
        {
          return _order;
        }
        set
        {
          __isset.order = true;
          this._order = value;
        }
      }

      public List<TOrderItem> OrderItem
      {
        get
        {
          return _orderItem;
        }
        set
        {
          __isset.orderItem = true;
          this._orderItem = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool order;
        public bool orderItem;
        public bool userId;
      }

      public CreateOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Order = new TOrder();
                Order.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  OrderItem = new List<TOrderItem>();
                  TList _list64 = iprot.ReadListBegin();
                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)
                  {
                    TOrderItem _elem66 = new TOrderItem();
                    _elem66 = new TOrderItem();
                    _elem66.Read(iprot);
                    OrderItem.Add(_elem66);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateOrder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Order != null && __isset.order) {
          field.Name = "order";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Order.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderItem != null && __isset.orderItem) {
          field.Name = "orderItem";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, OrderItem.Count));
            foreach (TOrderItem _iter67 in OrderItem)
            {
              _iter67.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateOrder_args(");
        sb.Append("Order: ");
        sb.Append(Order== null ? "<null>" : Order.ToString());
        sb.Append(",OrderItem: ");
        sb.Append(OrderItem);
        sb.Append(",UserId: ");
        sb.Append(UserId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CreateOrder_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public CreateOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateOrder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateOrder_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class UpdateOrder_args : TBase
    {
      private TOrder _order;
      private List<TOrderItem> _orderItem;
      private string _userId;

      public TOrder Order
      {
        get
        {
          return _order;
        }
        set
        {
          __isset.order = true;
          this._order = value;
        }
      }

      public List<TOrderItem> OrderItem
      {
        get
        {
          return _orderItem;
        }
        set
        {
          __isset.orderItem = true;
          this._orderItem = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool order;
        public bool orderItem;
        public bool userId;
      }

      public UpdateOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Order = new TOrder();
                Order.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  OrderItem = new List<TOrderItem>();
                  TList _list68 = iprot.ReadListBegin();
                  for( int _i69 = 0; _i69 < _list68.Count; ++_i69)
                  {
                    TOrderItem _elem70 = new TOrderItem();
                    _elem70 = new TOrderItem();
                    _elem70.Read(iprot);
                    OrderItem.Add(_elem70);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateOrder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Order != null && __isset.order) {
          field.Name = "order";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Order.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderItem != null && __isset.orderItem) {
          field.Name = "orderItem";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, OrderItem.Count));
            foreach (TOrderItem _iter71 in OrderItem)
            {
              _iter71.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateOrder_args(");
        sb.Append("Order: ");
        sb.Append(Order== null ? "<null>" : Order.ToString());
        sb.Append(",OrderItem: ");
        sb.Append(OrderItem);
        sb.Append(",UserId: ");
        sb.Append(UserId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class UpdateOrder_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public UpdateOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateOrder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateOrder_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class UpdateSingleOrderInfo_args : TBase
    {
      private TOrder _order;
      private string _userId;

      public TOrder Order
      {
        get
        {
          return _order;
        }
        set
        {
          __isset.order = true;
          this._order = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool order;
        public bool userId;
      }

      public UpdateSingleOrderInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Order = new TOrder();
                Order.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateSingleOrderInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Order != null && __isset.order) {
          field.Name = "order";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Order.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateSingleOrderInfo_args(");
        sb.Append("Order: ");
        sb.Append(Order== null ? "<null>" : Order.ToString());
        sb.Append(",UserId: ");
        sb.Append(UserId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class UpdateSingleOrderInfo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public UpdateSingleOrderInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateSingleOrderInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateSingleOrderInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class DeleteOrder_args : TBase
    {
      private TOrder _order;
      private string _userId;

      public TOrder Order
      {
        get
        {
          return _order;
        }
        set
        {
          __isset.order = true;
          this._order = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool order;
        public bool userId;
      }

      public DeleteOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Order = new TOrder();
                Order.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteOrder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Order != null && __isset.order) {
          field.Name = "order";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Order.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteOrder_args(");
        sb.Append("Order: ");
        sb.Append(Order== null ? "<null>" : Order.ToString());
        sb.Append(",UserId: ");
        sb.Append(UserId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class DeleteOrder_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public DeleteOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteOrder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteOrder_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
