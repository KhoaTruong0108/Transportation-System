/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace TransportService
{

  [Serializable]
  public partial class TCustomer : TBase
  {
    private string _CustomerId;
    private string _Name;
    private string _CompanyName;
    private string _IdCardNumber;
    private string _Phone;
    private string _Mobile;
    private string _Address1;
    private string _Address2;
    private string _CreatedDate;
    private string _CreatedBy;

    public string CustomerId
    {
      get
      {
        return _CustomerId;
      }
      set
      {
        __isset.CustomerId = true;
        this._CustomerId = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string CompanyName
    {
      get
      {
        return _CompanyName;
      }
      set
      {
        __isset.CompanyName = true;
        this._CompanyName = value;
      }
    }

    public string IdCardNumber
    {
      get
      {
        return _IdCardNumber;
      }
      set
      {
        __isset.IdCardNumber = true;
        this._IdCardNumber = value;
      }
    }

    public string Phone
    {
      get
      {
        return _Phone;
      }
      set
      {
        __isset.Phone = true;
        this._Phone = value;
      }
    }

    public string Mobile
    {
      get
      {
        return _Mobile;
      }
      set
      {
        __isset.Mobile = true;
        this._Mobile = value;
      }
    }

    public string Address1
    {
      get
      {
        return _Address1;
      }
      set
      {
        __isset.Address1 = true;
        this._Address1 = value;
      }
    }

    public string Address2
    {
      get
      {
        return _Address2;
      }
      set
      {
        __isset.Address2 = true;
        this._Address2 = value;
      }
    }

    public string CreatedDate
    {
      get
      {
        return _CreatedDate;
      }
      set
      {
        __isset.CreatedDate = true;
        this._CreatedDate = value;
      }
    }

    public string CreatedBy
    {
      get
      {
        return _CreatedBy;
      }
      set
      {
        __isset.CreatedBy = true;
        this._CreatedBy = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool CustomerId;
      public bool Name;
      public bool CompanyName;
      public bool IdCardNumber;
      public bool Phone;
      public bool Mobile;
      public bool Address1;
      public bool Address2;
      public bool CreatedDate;
      public bool CreatedBy;
    }

    public TCustomer() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              CustomerId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CompanyName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              IdCardNumber = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Phone = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Mobile = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Address1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Address2 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              CreatedDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              CreatedBy = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TCustomer");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (CustomerId != null && __isset.CustomerId) {
        field.Name = "CustomerId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.Name) {
        field.Name = "Name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (CompanyName != null && __isset.CompanyName) {
        field.Name = "CompanyName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CompanyName);
        oprot.WriteFieldEnd();
      }
      if (IdCardNumber != null && __isset.IdCardNumber) {
        field.Name = "IdCardNumber";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IdCardNumber);
        oprot.WriteFieldEnd();
      }
      if (Phone != null && __isset.Phone) {
        field.Name = "Phone";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Phone);
        oprot.WriteFieldEnd();
      }
      if (Mobile != null && __isset.Mobile) {
        field.Name = "Mobile";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mobile);
        oprot.WriteFieldEnd();
      }
      if (Address1 != null && __isset.Address1) {
        field.Name = "Address1";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Address1);
        oprot.WriteFieldEnd();
      }
      if (Address2 != null && __isset.Address2) {
        field.Name = "Address2";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Address2);
        oprot.WriteFieldEnd();
      }
      if (CreatedDate != null && __isset.CreatedDate) {
        field.Name = "CreatedDate";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CreatedDate);
        oprot.WriteFieldEnd();
      }
      if (CreatedBy != null && __isset.CreatedBy) {
        field.Name = "CreatedBy";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CreatedBy);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TCustomer(");
      sb.Append("CustomerId: ");
      sb.Append(CustomerId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",CompanyName: ");
      sb.Append(CompanyName);
      sb.Append(",IdCardNumber: ");
      sb.Append(IdCardNumber);
      sb.Append(",Phone: ");
      sb.Append(Phone);
      sb.Append(",Mobile: ");
      sb.Append(Mobile);
      sb.Append(",Address1: ");
      sb.Append(Address1);
      sb.Append(",Address2: ");
      sb.Append(Address2);
      sb.Append(",CreatedDate: ");
      sb.Append(CreatedDate);
      sb.Append(",CreatedBy: ");
      sb.Append(CreatedBy);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
